#!/usr/bin/env python

from decryptr.mcmc_glm.crispr_decryptr_stan import analyze
from decryptr.conv_mat_construct.predict_fns import cmat_run
from decryptr.classify.classification import classify_procedure
import argparse
import sys

class decryptr(object):
    def __init__(self):

        parser = argparse.ArgumentParser(
            description='CRISPR DECRYPTR',
            usage=

        '''decryptr <command> [<args>]
                        
            Commands:
                        
                infer                Infer guide-specific effects from screen readout with MCMC
                    
                predict              Align guides and construct convolution matrix
                    
                classify             Classify regulatory elements with GP Deconvolution and HsMMs 
                
            Contact Information:
                        
                Anders West Rasmussen
                Flatiron Institute Center for Computational Biology (CCB)
                Systems Biology Group
                email: arasmussen@flatironinstitute.org 
                ''' )

        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def infer(self):
        formatter = lambda prog: argparse.HelpFormatter(prog, max_help_position=55)
        parser = argparse.ArgumentParser(formatter_class=formatter,
                                         description='Infer regulatory effects from screen data',
                                         usage='''decryptr infer <count_file> <design_matrix> <replicate_information> [-h] [options]
            ''')

        parser.add_argument("count_file", help='Screen data in .tsv format', action='store', type=str)
        parser.add_argument("design_matrix", help='Design matrix in .tsv format', action='store', type=str)
        parser.add_argument("replicate_information", help='Replicate information in .tsv format',
                            action='store', type=str)
        parser.add_argument('--n_chains', help='number of markov chains', required=False, default=2, action='store',
                            type=int, dest='n_chains')
        parser.add_argument('--batch_size', help='batch size', required=False, default=500, action='store', type=int,
                            dest='batch_size')
        parser.add_argument('--n_batches', help='number of batches to run simultaneously', required=False, default=1,
                            action='store', type=int, dest='n_batches')
        parser.add_argument('--n_samples', help='number of samples', required=False, default=None, action='store',
                            type=int, dest='n_samples')
        parser.add_argument('--outfile', help='out filename', required=False, default='posterior_outfile.tsv',
                            action='store', type=str, dest='output_filename')
        parser.add_argument('--sample_file_prefix', action='store', dest='sample_file_prefix', type=str, required=False,
                            default='samples',
                            help='sample_file_prefix: will overwrite existing files (default: samples)')
        parser.add_argument('--logfilename', action='store', dest='logfilename', type=str, required=False,
                            default='infer.log', help='name of the log file')
        parser.add_argument('--outfile_devs', action='store', dest='outfile_devs', type=str, required=False,
                            default=None, help='if specified write deviation moments to this file')
        parser.add_argument('--species', action='store', dest='species', type=str, required=False,
                            default=None, help='species under consideration (for uniqueness)')
        parser.add_argument('--targets', action='store', dest='targets', type=str, required=False,
                            default=None, help='file of targets (only required if you specify a species for uniqueness adjustment')
        parser.add_argument('--spacers', action='store', dest='spacers', type=str, required=False,
                            default=None,
                            help='file of spacers (only required if you specify a species for uniqueness adjustment')

        args = parser.parse_args(sys.argv[2:])
        analyze(args.count_file, args.design_matrix, args.replicate_information,
                args.sample_file_prefix, args.n_chains, args.n_samples, args.batch_size,
                args.n_batches,
                args.output_filename, args.logfilename, args.outfile_devs, args.species, args.targets, args.spacers)

    def predict(self):
        formatter = lambda prog: argparse.HelpFormatter(prog, max_help_position=55)
        parser = argparse.ArgumentParser(formatter_class=formatter,
                                         description='Construct the convolution matrix for deconvolution step',
                                         usage='''decryptr predict <targets> <cas9_alg> [-h] [options]
            ''')

        parser.add_argument("targets", help='single column file specifying target locations (first line is chromosome ex/ chr4)', action='store', type=str)
        parser.add_argument("cas9_alg", help='use off-target and repair outcome prediction for Cas9 mutagenesis screens (True / False)',
                            action='store', type=str)

        parser.add_argument('--filter_dev', help='gaussian filter window deviation', required=False, default=7,
                            action='store',
                            type=float, dest='filter_dev')
        parser.add_argument('--filter_window', help='gaussian filter window size (must be odd integer)', required=False,
                            default=41, action='store',
                            type=int, dest='filter_window')
        parser.add_argument('--spacers', help='.tsv file of spacers', required=False, default=None, action='store',
                            type=str, dest='spacers')
        parser.add_argument('--species', help='species to consider (hg19, hg38, mm10)', required=False, default=None, action='store',
                            type=str, dest='species')
        parser.add_argument('--reference', help='specify your own .fa file for chromosome under consideration', required=False,
                            default=None, action='store',
                            type=str, dest='reference')
        parser.add_argument('--ignore_specificity', help='if True, will not account for guide-specificity in convolution matrix', required=False,
                            default='False', action='store',
                            type=str, dest='ignore_specificity')
        parser.add_argument('--logfilename', action='store', dest='logfilename', type=str, required=False,
                            default='predict.log', help='name of the log file')
        parser.add_argument('--n_processes', action='store', dest='n_processes', type=int, required=False,
                            default=1, help='num processes for running alignment algorithm')
        parser.add_argument('--cmat_name', action='store', dest='cmat_name', type=str, required=False,
                            default='convolution_matrix.p', help='name of convolution matrix')

        args = parser.parse_args(sys.argv[2:])
        cmat_run(args.targets, args.cas9_alg, args.filter_dev, args.filter_window, args.spacers, args.species, args.reference, None, args.ignore_specificity, args.logfilename, args.n_processes, args.cmat_name)

    def classify(self):
        formatter = lambda prog: argparse.HelpFormatter(prog, max_help_position=45)
        parser = argparse.ArgumentParser(formatter_class=formatter,
                                         description='Determine marginal enhancer and silencer state probabilities',
                                         usage='''decryptr classify <effect_file> <targets> <conv_mat> [-h] [options]
            ''')

        parser.add_argument("effect_file", help='effect file from inference step', action='store', type=str)
        parser.add_argument("targets", help='single column file specifying target locations (first line is chromosome ex/ chr4)', action='store', type=str)
        parser.add_argument("conv_mat", help='location of convolution matrix', action='store', type=str)

        parser.add_argument('--hyperparameters', help='hyperparameter file for the HsMM', required=False,
                            default=None,
                            action='store',
                            type=str, dest='priors')
        parser.add_argument('--out_dir', help='directory to write results files', required=False, default=None,
                            action='store',
                            type=str, dest='out_dir')
        parser.add_argument('--logfilename', action='store', dest='logfilename', type=str, required=False,
                            default='classify.log', help='name of the log file')
        parser.add_argument('--alpha', action='store', dest='alpha', type=float, required=False,
                            default=None, help='signal deviation parameter for Gaussian Process')
        parser.add_argument('--rho', action='store', dest='rho', type=float, required=False,
                            default=None, help='length scale parameter for Gaussian Process')
        parser.add_argument('--sigma', action='store', dest='sigma', type=float, required=False,
                            default=None, help='process noise parameter for Gaussian Process')
        parser.add_argument('--bed_threshold', action='store', dest='bed_threshold', type=float, required=False,
                            default=0.9, help='probability threshold for .bed files')
        parser.add_argument('--flip_enhancer', action='store', dest='flip_sign', type=str, required=False,
                            default='False', help='set to true if enhancers have negative effect (only if using default hyperparameters)')
        parser.add_argument('--normalize', action='store', dest='norm', type=str, required=False, default=None, help='normalize incoming signal (standard score)')
        parser.add_argument('--hampel_filter', action='store', dest='hampel', type=str, required=False, default=None, help='remove outliers with Hampel filter')
        parser.add_argument('--parallelize', help='if True, implements the classify algorithm in a parallelized manner losing some off-target information', required=False,
                            default='False', action='store',
                            type=str, dest='parallelize')
        parser.add_argument('--slices', action='store', dest='slices', type=int, required=False,
                            default=10, help='number of segments if parallelize is True')
        
        args = parser.parse_args(sys.argv[2:])
        classify_procedure(args.effect_file, args.targets, args.conv_mat, args.logfilename,
                       args.priors, args.out_dir, args.alpha, args.rho, args.sigma, args.bed_threshold, args.flip_sign, args.norm, args.hampel, args.parallelize, args.slices)

if __name__ == '__main__':
    decryptr()
